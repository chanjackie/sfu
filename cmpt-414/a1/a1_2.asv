% 2. Smoothing
gNoiseIm1 = imread('trees_var002.tif');
gNoiseIm2 = imread('trees_var010.tif');
gNoiseIm3 = imread('trees_var025.tif');
spIm1 = imread('trees_salt004.tif');
spIm2 = imread('trees_salt020.tif');
spIm3 = imread('trees_salt050.tif');
t = ones(3,3)*1/9;
avgGN1 = spIm2; medGN1 = spIm2;
avgSP1 = spIm2; knnGN1 = spIm2;
iterations = 3;
K = 5;
for i = 1:iterations
    avgGN1 = uint8(conv2(avgGN1, t, 'same'));
    avgSP1 = uint8(conv2(avgSP1, t, 'same'));
    medGN1 = medfilt2(medGN1);
    knnGN1 = computeKNN(knnGN1, K);
end

subplot(3,6,2), imshow(gNoiseIm1);
subplot(3,6,3), imshow(spIm2);
subplot(3,6,5), imshow(avgGN1);
subplot(3,6,6), imshow(avgSP1);
subplot(3,6,7), imshow(medGN1);
subplot(3,6,8), imshow(knnGN1);

function newImg = computeKNN(img, K)
    newImg = uint8(zeros(size(img)));
    for j = 1:size(img, 1)
        for k = 1:size(img, 2)
            neighbours = [img(max(1,j-1), max(1,k-1)), img(j, max(1,k-1))...
                img(min(size(img,1),j+1), max(1,k-1)), img(max(1,j-1), k)...
                img(min(size(img,1),j+1), k), img(max(1,j-1), min(size(img,2),k+1))...
                img(j, min(size(img,2),k+1)), img(min(size(img,1),j+1), min(size(img,2),k+1))];
            newImg(j,k) = computeNNAvg(neighbours, img(j,k), K);
        end
    end
end

function val = computeNNAvg(neighbours, center, K)
    nearestNeighbours = zeros(K,1);
    for i = 1:K
        minVal = Inf;
        minIndex = 1;
        for j = 1:size(neighbours)
            diff = abs(neighbours(j)-center);
            if diff < minVal
                minVal = diff;
                minIndex = j;
            end
        end
        nearestNeighbours(i) = neighbours(minIndex);
        neighbours(minIndex) = [];
    end
%     disp(mean(nearestNeighbours));
    val = round(mean(nearestNeighbours));            
end